{"version":3,"sources":["DemoListComponent/Card49.js","DemoListComponent/CardList49.js","DemoComponent/SearchBox.js","DemoComponent/Scroll.js","DemoComponent/App49.js","serviceWorker.js","index.js"],"names":["Card","props","id","className","src","alt","CardList","demo","cardComponent","map","user","i","key","name","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","Main","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","filterDemo","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sNAWeA,EATF,SAACC,GAAU,IACbC,EAAMD,EAANC,GACP,OACI,yBAAKC,UAAU,sDACX,yBAAKC,IAAG,mCAA8BF,GAAMG,IAAI,OCU7CC,EAZE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACVC,EAAgBD,EAAKE,KAAI,SAACC,EAAKC,GACjC,OACA,kBAAC,EAAD,CACIC,IAAKD,EACLT,GAAIK,EAAKI,GAAGT,GACZW,KAAMN,EAAKI,GAAGE,UAEtB,OAAO,6BAAML,ICGFM,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKZ,UAAU,OACb,2BACEA,UAAU,mCACVa,KAAK,SACLC,YAAY,SACZC,SAAUH,MCGHI,G,MAVA,SAAAlB,GACX,OACI,yBAAKmB,MACD,CAAEC,SAAS,SACXC,OAAQ,kBACRC,OAAQ,UAEftB,EAAMuB,YCuCMC,E,kDAzCb,aAAe,IAAD,8BACZ,gBAYFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAZ1C,EAAKC,MAAQ,CACXzB,KAAM,GACNsB,YAAa,IAJH,E,gEAQM,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACrB,KAAO8B,S,+BAK7B,IAAD,OACDC,EAAaC,KAAKP,MAAMzB,KAAKiC,QAAO,SAACjC,GACzC,OAAOA,EAAKM,KACT4B,cACAC,SAAS,EAAKV,MAAMH,YAAYY,kBAGrC,OAA8B,IAA1BF,KAAKP,MAAMzB,KAAKoC,OACZ,uCAGN,yBAAKxC,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWY,aAAcwB,KAAKb,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,KAAM+B,U,GAhCTM,aCMCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a0bdb56c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n    const {id} = props;\r\n    return(\r\n        <div className='tc bg-light-gray dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/test${id}`} alt=''/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card49';\r\n\r\n\r\nconst CardList = ({ demo }) => {\r\n    const cardComponent = demo.map((user,i) => {\r\n        return (      \r\n        <Card       \r\n            key={i}        \r\n            id={demo[i].id}        \r\n            name={demo[i].name}/>  \r\n    );  }); \r\n    return <div>{cardComponent}</div>;\r\n\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--black bg-lightest-blue'\r\n        type='search'\r\n        placeholder='Search'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n    return (   \r\n        <div style={\r\n            { overflow:'scroll',\r\n            border: '1px solid black', \r\n            height: '800px' }\r\n        }    >      \r\n    {props.children}    \r\n</div> );\r\n};\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\nimport CardList from '../DemoListComponent/CardList49';\r\nimport SearchBox from './SearchBox';\r\nimport './App49.css';\r\nimport Scroll from './Scroll';\r\n\r\nclass Main extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        demo: [],\r\n        searchField: '',\r\n      };\r\n    }\r\n\r\n    componentDidMount(){\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({demo : users}));\r\n    }\r\n    onSearchChange = (event) => {\r\n      this.setState({ searchField: event.target.value });\r\n    };\r\n    render() {\r\n      const filterDemo = this.state.demo.filter((demo) => {\r\n        return demo.name\r\n          .toLowerCase()\r\n          .includes(this.state.searchField.toLowerCase());\r\n      });\r\n\r\n      if (this.state.demo.length ===0){\r\n        return<h1>Loading</h1>;\r\n      }else{\r\n            return (\r\n        <div className='tc'>\r\n          <h1>JKYROC DEMO</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <CardList demo={filterDemo} />\r\n          </Scroll>\r\n          \r\n        </div>\r\n      );  \r\n      }\r\n\r\n    }\r\n  }\r\n  \r\n  export default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './DemoComponent/App49';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}